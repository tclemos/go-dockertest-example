// Code generated by sqlc. DO NOT EDIT.
// source: another_things.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAnotherThing = `-- name: CreateAnotherThing :one
INSERT INTO another_things (
  id, code, name
) VALUES (
  $1, $2, $3
)
RETURNING id, code, name
`

type CreateAnotherThingParams struct {
	ID   int32     `json:"id"`
	Code uuid.UUID `json:"code"`
	Name string    `json:"name"`
}

func (q *Queries) CreateAnotherThing(ctx context.Context, arg CreateAnotherThingParams) (AnotherThing, error) {
	row := q.queryRow(ctx, q.createAnotherThingStmt, createAnotherThing, arg.ID, arg.Code, arg.Name)
	var i AnotherThing
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}

const deleteAnotherThing = `-- name: DeleteAnotherThing :exec
DELETE 
  FROM another_things
 WHERE id = $1
`

func (q *Queries) DeleteAnotherThing(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAnotherThingStmt, deleteAnotherThing, id)
	return err
}

const deleteAnotherThingByCode = `-- name: DeleteAnotherThingByCode :exec
DELETE 
  FROM another_things
 WHERE code = $1
`

func (q *Queries) DeleteAnotherThingByCode(ctx context.Context, code uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAnotherThingByCodeStmt, deleteAnotherThingByCode, code)
	return err
}

const getAnotherThing = `-- name: GetAnotherThing :one
SELECT id, code, name 
  FROM another_things t
WHERE t.id = $1
LIMIT 1
`

func (q *Queries) GetAnotherThing(ctx context.Context, id int32) (AnotherThing, error) {
	row := q.queryRow(ctx, q.getAnotherThingStmt, getAnotherThing, id)
	var i AnotherThing
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}

const getAnotherThingByCode = `-- name: GetAnotherThingByCode :one
SELECT id, code, name 
  FROM another_things t
WHERE t.code = $1
LIMIT 1
`

func (q *Queries) GetAnotherThingByCode(ctx context.Context, code uuid.UUID) (AnotherThing, error) {
	row := q.queryRow(ctx, q.getAnotherThingByCodeStmt, getAnotherThingByCode, code)
	var i AnotherThing
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}

const listAnotherThings = `-- name: ListAnotherThings :many
SELECT id, code, name
  FROM another_things t
 ORDER BY t.name
`

func (q *Queries) ListAnotherThings(ctx context.Context) ([]AnotherThing, error) {
	rows, err := q.query(ctx, q.listAnotherThingsStmt, listAnotherThings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnotherThing
	for rows.Next() {
		var i AnotherThing
		if err := rows.Scan(&i.ID, &i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnotherThing = `-- name: UpdateAnotherThing :one
UPDATE another_things
   SET code = $2
     , name = $3
 WHERE id = $1
 RETURNING id, code, name
`

type UpdateAnotherThingParams struct {
	ID   int32     `json:"id"`
	Code uuid.UUID `json:"code"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateAnotherThing(ctx context.Context, arg UpdateAnotherThingParams) (AnotherThing, error) {
	row := q.queryRow(ctx, q.updateAnotherThingStmt, updateAnotherThing, arg.ID, arg.Code, arg.Name)
	var i AnotherThing
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}
