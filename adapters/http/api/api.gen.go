// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Error defines model for error.
type Error struct {
	Message string `json:"message"`
}

// Thing defines model for thing.
type Thing struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

// Code defines model for code.
type Code string

// PageNumber defines model for pageNumber.
type PageNumber int32

// PageSize defines model for pageSize.
type PageSize int32

// N400 defines model for 400.
type N400 Error

// FindThingParams defines parameters for FindThing.
type FindThingParams struct {

	// page number
	PageNumber *PageNumber `json:"pageNumber,omitempty"`

	// page size
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// CreateThingJSONBody defines parameters for CreateThing.
type CreateThingJSONBody Thing

// UpdateThingJSONBody defines parameters for UpdateThing.
type UpdateThingJSONBody Thing

// CreateThingJSONRequestBody defines body for CreateThing for application/json ContentType.
type CreateThingJSONRequestBody CreateThingJSONBody

// UpdateThingJSONRequestBody defines body for UpdateThing for application/json ContentType.
type UpdateThingJSONRequestBody UpdateThingJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /things)
	FindThing(ctx echo.Context, params FindThingParams) error

	// (POST /things)
	CreateThing(ctx echo.Context) error

	// (PUT /things)
	UpdateThing(ctx echo.Context) error

	// (DELETE /things/{code})
	DeleteThing(ctx echo.Context, code Code) error

	// (GET /things/{code})
	GetThingsCode(ctx echo.Context, code Code) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindThing converts echo context to params.
func (w *ServerInterfaceWrapper) FindThing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindThingParams
	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindThing(ctx, params)
	return err
}

// CreateThing converts echo context to params.
func (w *ServerInterfaceWrapper) CreateThing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateThing(ctx)
	return err
}

// UpdateThing converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateThing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateThing(ctx)
	return err
}

// DeleteThing converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteThing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code Code

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteThing(ctx, code)
	return err
}

// GetThingsCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetThingsCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code Code

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThingsCode(ctx, code)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/things", wrapper.FindThing)
	router.POST(baseURL+"/things", wrapper.CreateThing)
	router.PUT(baseURL+"/things", wrapper.UpdateThing)
	router.DELETE(baseURL+"/things/:code", wrapper.DeleteThing)
	router.GET(baseURL+"/things/:code", wrapper.GetThingsCode)

}

